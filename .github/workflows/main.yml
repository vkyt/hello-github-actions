name: Test Lighthouse Step
on:
  # run daily at 9am pt
  schedule:
    - cron: '50 20 * * *'
  pull_request:
  repository_dispatch:
    types:
      - R2_BUILD_COMPLETE
jobs:
  build:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: ./action-a
        with:
          MY_NAME: "Mona"
      
      - id: successfulApps
        name: Check Apps
        if: github.event_name != 'schedule'
        run: |
          SUCCESSFUL_APPS=(next premium-hub)
          echo $SUCCESSFUL_APPS

          echo "::set-output name=apps::$SUCCESSFUL_APPS"

          SUCCESSFUL_APPS_ARR=$(echo $SUCCESSFUL_APPS | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g')
          SUCCESSFUL_APPS_ARR_FORMATTED=( $SUCCESSFUL_APPS_ARR )
          ENABLED_APPS=()

          for i in ${SUCCESSFUL_APPS_ARR_FORMATTED[@]}
          do
            APP_ID=(${i//\"})
            echo $APP_ID
            echo $(pwd)
            VISUAL_TEST_REQ=true

            if [[ "$VISUAL_TEST_REQ" = true ]];then
              echo "::set-output name=testRequired::true"
              ENABLED_APPS+=($APP_ID)
              break;
            else
              echo "::set-output name=testRequired::false"
            fi
          done

          echo $ENABLED_APPS
      - uses: actions/github-script@v3
        id: createCheckRun
        if: github.event_name != 'schedule' && steps.successfulApps.outputs.length != 0
        with:
          script: |
            const { data: { id: checkRunId }} = await github.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Tests",
              head_sha: "${{ github.event.client_payload.version }}",
              status: "queued"
            })

            console.info({ checkRunId });

            return checkRunId;

      - name: Start `run-lighthouse-test` CodeBuild
        id: runLighthouse
        if: steps.successfulApps.outputs.length >= 1 || github.event_name == 'schedule'
        uses: gagoar/invoke-aws-lambda@v3.2.0
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.KEY }}
          FunctionName: codebuildTrigger
          Qualifier: production
          logType: None
          MAX_RETRIES: 0
          Payload: '{"queryStringParameters": { "projectName": "run-lighthouse-test-vlee", "VERSION": "${{ github.event.client_payload && github.event.client_payload.version }}", "GITHUB_CHECK_RUN_ID": "${{ steps.createCheckRun && steps.createCheckRun.outputs.result }}", "APP_NAMES": ${{ steps.successfulApps.outputs.appsString || ''""''}}, "CHANGE_SET_ID": "${{ github.event.client_payload && github.event.client_payload.changeMetadata.ref.changesetId }}", "CHANGE_ID": "${{ github.event.client_payload && github.event.client_payload.changeMetadata.ref.changeId }}", "IS_PROD_RUN": "${{ github.event_name == ''schedule''}}", "GITHUB_API_TOKEN": "${{ steps.auth.outputs.token }}"}}'

      - id: getCodeBuildExecution
        if: steps.successfulApps.outputs.length >= 1 || github.event_name == 'schedule'
        run: |
          EXECUTION_ID=$(echo '${{ fromJson(steps.runLighthouse.outputs.response).Payload }}' | jq -r '.body[0]')
          echo $EXECUTION_ID
          echo "::set-output name=id::$EXECUTION_ID"